{"ast":null,"code":"var _jsxFileName = \"/Users/yuhojin/Desktop/BEB1stProject-05/Client/src/Components/MakeNFT.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./MakeNFT.css\";\nimport ERC721abi from \"./ERC721abi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IpfsApi = require(\"ipfs-api\");\n\nconst ipfs = IpfsApi(\"ipfs.infura.io\", \"5001\", {\n  protocol: \"http\"\n});\nconst CA = \"0xc5ea1576fda2b80020d30f06d656646fb0981233\";\n\nfunction MakeNFT(_ref) {\n  _s();\n\n  let {\n    web3,\n    account\n  } = _ref;\n  const [img, SetImg] = useState(\"\");\n  const [name, SetName] = useState(\"\");\n  const [link, SetLink] = useState(\"\");\n  const [description, SetDescription] = useState(\"\");\n\n  const clickButton = async () => {\n    if (name !== \"\" && img !== \"\" && description !== \"\") {\n      /*express로 서버 따로 만들어야줘야되나?? */\n      console.log(ipfs.add);\n\n      const ipfsUpload = async (req, res) => {\n        await ipfs.add(Buffer.from(img)).then(result => {\n          SetLink(`https://ipfs.io/ipfs/${String(result[0].path)}`);\n        });\n      };\n\n      await ipfsUpload(); // 여기까지 하면 링크, 이름, 추가 설명 까지 완성\n      // SendTransaction();\n    } else {\n      alert(\"모든 값을 입력해 주세요!\");\n    }\n  };\n\n  const SendTransaction = async () => {\n    const nftContract = await new web3.eth.Contract(ERC721abi, CA);\n    const nonce = await web3.eth.getTransactionCount(account, \"latest\");\n    const tx = {\n      from: account,\n      to: CA,\n      nonce: nonce,\n      gas: 500000,\n      data: nftContract.methods.mintNFT(account, `${link}, ${name}, ${description}`).encodeABI()\n    };\n    await web3.eth.sendTransaction(tx).then(trs => {\n      console.log(trs.blockNumber);\n    });\n    const total = await nftContract.methods.totalSupply().call();\n    let arr = [];\n\n    for (let i = 1; i <= total; i++) {\n      arr.push(i);\n    }\n\n    for (let Id of arr) {\n      let host = await nftContract.methods.ownerOf(Id).call();\n\n      if (String(host).toLowerCase() === account) {\n        let tokenURI = await nftContract.methods.tokenURI(Id).call();\n        console.log(tokenURI);\n      }\n    }\n\n    alert(\"NFT생성 완료!!!!\");\n  };\n\n  const imgChange = async e => {\n    if (e.files === undefined) {\n      let reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]); // base64로 인코딩\n\n      reader.onload = event => {\n        const previewImage = document.querySelector(\".img\");\n        previewImage.src = event.target.result;\n        SetImg(event.target.result);\n      };\n    }\n  };\n\n  const convertToBuffer = async reader => {\n    const buffer = Buffer.from(reader.result);\n  }; //useState\n\n\n  const nameChange = e => {\n    SetName(e.target.value);\n  }; //useState\n\n\n  const descriptionChange = e => {\n    SetDescription(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MakeNFT_back\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MakeNFT_BOX\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        children: \"Create New Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"img_span\",\n          children: \"img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          className: \"img_example\",\n          children: \"File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLTF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/\",\n          className: \"img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"img\",\n          type: \"file\",\n          placeholder: \"img\",\n          required: true,\n          onChange: imgChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name_span\",\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"name\",\n          required: true,\n          onChange: nameChange,\n          value: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"description_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"description_span\",\n          children: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"description\",\n          required: true,\n          onChange: descriptionChange,\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"createbutton\",\n        onClick: clickButton,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MakeNFT, \"WzHUbV0sDlb4iFC3Oo9Tg6506e8=\");\n\n_c = MakeNFT;\nexport default MakeNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MakeNFT\");","map":{"version":3,"sources":["/Users/yuhojin/Desktop/BEB1stProject-05/Client/src/Components/MakeNFT.js"],"names":["React","useState","ERC721abi","IpfsApi","require","ipfs","protocol","CA","MakeNFT","web3","account","img","SetImg","name","SetName","link","SetLink","description","SetDescription","clickButton","console","log","add","ipfsUpload","req","res","Buffer","from","then","result","String","path","alert","SendTransaction","nftContract","eth","Contract","nonce","getTransactionCount","tx","to","gas","data","methods","mintNFT","encodeABI","sendTransaction","trs","blockNumber","total","totalSupply","call","arr","i","push","Id","host","ownerOf","toLowerCase","tokenURI","imgChange","e","files","undefined","reader","FileReader","readAsDataURL","target","onload","event","previewImage","document","querySelector","src","convertToBuffer","buffer","nameChange","value","descriptionChange"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./MakeNFT.css\";\nimport ERC721abi from \"./ERC721abi\";\n\nconst IpfsApi = require(\"ipfs-api\");\nconst ipfs = IpfsApi(\"ipfs.infura.io\", \"5001\", { protocol: \"http\" });\nconst CA = \"0xc5ea1576fda2b80020d30f06d656646fb0981233\";\n\nfunction MakeNFT({ web3, account }) {\n  const [img, SetImg] = useState(\"\");\n  const [name, SetName] = useState(\"\");\n  const [link, SetLink] = useState(\"\");\n  const [description, SetDescription] = useState(\"\");\n\n  const clickButton = async () => {\n    if (name !== \"\" && img !== \"\" && description !== \"\") {\n      /*express로 서버 따로 만들어야줘야되나?? */\n      console.log(ipfs.add);\n      const ipfsUpload = async (req, res) => {\n        await ipfs.add(Buffer.from(img)).then((result) => {\n          SetLink(`https://ipfs.io/ipfs/${String(result[0].path)}`);\n        });\n      };\n      await ipfsUpload();\n      // 여기까지 하면 링크, 이름, 추가 설명 까지 완성\n      // SendTransaction();\n    } else {\n      alert(\"모든 값을 입력해 주세요!\");\n    }\n  };\n\n  const SendTransaction = async () => {\n    const nftContract = await new web3.eth.Contract(ERC721abi, CA);\n    const nonce = await web3.eth.getTransactionCount(account, \"latest\");\n\n    const tx = {\n      from: account,\n      to: CA,\n      nonce: nonce,\n      gas: 500000,\n      data: nftContract.methods\n        .mintNFT(account, `${link}, ${name}, ${description}`)\n        .encodeABI(),\n    };\n\n    await web3.eth.sendTransaction(tx).then((trs) => {\n      console.log(trs.blockNumber);\n    });\n\n    const total = await nftContract.methods.totalSupply().call();\n\n    let arr = [];\n    for (let i = 1; i <= total; i++) {\n      arr.push(i);\n    }\n    for (let Id of arr) {\n      let host = await nftContract.methods.ownerOf(Id).call();\n      if (String(host).toLowerCase() === account) {\n        let tokenURI = await nftContract.methods.tokenURI(Id).call();\n        console.log(tokenURI);\n      }\n    }\n    alert(\"NFT생성 완료!!!!\");\n  };\n\n  const imgChange = async (e) => {\n    if (e.files === undefined) {\n      let reader = new FileReader();\n\n      reader.readAsDataURL(e.target.files[0]);\n      // base64로 인코딩\n      reader.onload = (event) => {\n        const previewImage = document.querySelector(\".img\");\n        previewImage.src = event.target.result;\n        SetImg(event.target.result);\n      };\n    }\n  };\n\n  const convertToBuffer = async (reader) => {\n    const buffer = Buffer.from(reader.result);\n  };\n\n  //useState\n  const nameChange = (e) => {\n    SetName(e.target.value);\n  };\n\n  //useState\n  const descriptionChange = (e) => {\n    SetDescription(e.target.value);\n  };\n\n  return (\n    <div className=\"MakeNFT_back\">\n      <div className=\"MakeNFT_BOX\">\n        <div id=\"title\">Create New Item</div>\n        <div className=\"img_box\">\n          <span className=\"img_span\">img</span>\n\n          <text className=\"img_example\">\n            File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG,\n            GLB, GLTF\n          </text>\n          <img src=\"/\" className=\"img\" />\n          <input\n            id=\"img\"\n            type=\"file\"\n            placeholder=\"img\"\n            required\n            onChange={imgChange}\n          />\n        </div>\n        <div className=\"name_box\">\n          <span className=\"name_span\">name</span>\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            required\n            onChange={nameChange}\n            value={name}\n          />\n        </div>\n\n        <div className=\"description_box\">\n          <span className=\"description_span\">description</span>\n          <input\n            type=\"text\"\n            placeholder=\"description\"\n            required\n            onChange={descriptionChange}\n            value={description}\n          />\n        </div>\n        <button className=\"createbutton\" onClick={clickButton}>\n          Create\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MakeNFT;\n"]},"metadata":{},"sourceType":"module"}