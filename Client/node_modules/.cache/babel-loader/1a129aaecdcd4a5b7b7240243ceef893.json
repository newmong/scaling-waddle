{"ast":null,"code":"var _jsxFileName = \"/Users/yuhojin/BEB1stProject-05/src/Components/MakeNFT.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./MakeNFT.css\";\nimport ERC721abi from \"./ERC721abi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Web3 = require(\"web3\");\n\nconst IpfsApi = require(\"ipfs-api\");\n\nconst ipfs = IpfsApi(\"ipfs.infura.io\", \"5001\", {\n  protocol: \"http\"\n});\n\nfunction MakeNFT(_ref) {\n  _s();\n\n  let {\n    web3,\n    account\n  } = _ref;\n  const [img, SetImg] = useState(\"\");\n  const [name, SetName] = useState(\"\");\n  const [link, SetLink] = useState(\"\");\n  const [description, SetDescription] = useState(\"\");\n  const [hash, SetHash] = useState([]);\n  const abi = ERC721abi;\n  const CA = \"0x89B078E2eAA3c9c93d3DF3b7A9928a7d08471661\";\n\n  const clickButton = async () => {\n    if (name !== \"\" && img !== \"\" && description !== \"\") {\n      /*express로 서버 따로 만들어야줘야되나?? */\n      const ipfsUpload = (req, res) => {\n        ipfs.add(Buffer.from(img)).then(result => {\n          SetLink(`https://ipfs.io/ipfs/${result[result.length - 1]}`);\n        });\n      };\n\n      await ipfsUpload(); // 여기까지 하면 링크, 이름, 추가 설명 까지 완성\n\n      SendTransaction();\n    }\n  };\n\n  const SendTransaction = async () => {\n    const nftContract = await new web3.eth.Contract(abi, CA);\n    const nonce = await web3.eth.getTransactionCount(account, \"latest\");\n    const tx = {\n      from: account,\n      to: CA,\n      nonce: nonce,\n      gas: 500000,\n      data: nftContract.methods.mintNFT(account, `${link}, ${name}, ${description}`).encodeABI()\n    }; // await web3.eth.sendTransaction(tx).then(console.log);\n\n    const total = await nftContract.methods.totalSupply().call();\n    let arr = [];\n\n    for (let i = 1; i <= total; i++) {\n      arr.push(i);\n    }\n\n    for (let Id of arr) {\n      let host = await nftContract.methods.ownerOf(Id).call();\n\n      if (String(host) === account) {\n        let tokenURI = await nftContract.methods.tokenURI(Id).call();\n        console.log(tokenURI);\n      }\n    }\n  };\n\n  const imgChange = async e => {\n    if (e.files === undefined) {\n      let reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]); // base64로 인코딩\n\n      reader.onload = event => {\n        const previewImage = document.querySelector(\".img\");\n        previewImage.src = event.target.result;\n        SetImg(event.target.result);\n      };\n    }\n  };\n\n  const convertToBuffer = async reader => {\n    const buffer = Buffer.from(reader.result);\n  }; //useState\n\n\n  const nameChange = e => {\n    SetName(e.target.value);\n  }; //useState\n\n\n  const descriptionChange = e => {\n    SetDescription(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MakeNFT_back\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MakeNFT_BOX\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        children: \"Create New Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"img_span\",\n          children: \"img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          className: \"img_example\",\n          children: \"File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLTF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/\",\n          className: \"img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"img\",\n          type: \"file\",\n          placeholder: \"img\",\n          required: true,\n          onChange: imgChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name_span\",\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"name\",\n          required: true,\n          onChange: nameChange,\n          value: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"description_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"description_span\",\n          children: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"description\",\n          required: true,\n          onChange: descriptionChange,\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"createbutton\",\n        onClick: clickButton,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MakeNFT, \"7UtDpbvDB1HY7HikDtHQMi+wekA=\");\n\n_c = MakeNFT;\nexport default MakeNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MakeNFT\");","map":{"version":3,"sources":["/Users/yuhojin/BEB1stProject-05/src/Components/MakeNFT.js"],"names":["React","useState","ERC721abi","Web3","require","IpfsApi","ipfs","protocol","MakeNFT","web3","account","img","SetImg","name","SetName","link","SetLink","description","SetDescription","hash","SetHash","abi","CA","clickButton","ipfsUpload","req","res","add","Buffer","from","then","result","length","SendTransaction","nftContract","eth","Contract","nonce","getTransactionCount","tx","to","gas","data","methods","mintNFT","encodeABI","total","totalSupply","call","arr","i","push","Id","host","ownerOf","String","tokenURI","console","log","imgChange","e","files","undefined","reader","FileReader","readAsDataURL","target","onload","event","previewImage","document","querySelector","src","convertToBuffer","buffer","nameChange","value","descriptionChange"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./MakeNFT.css\";\nimport ERC721abi from \"./ERC721abi\";\nconst Web3 = require(\"web3\");\nconst IpfsApi = require(\"ipfs-api\");\nconst ipfs = IpfsApi(\"ipfs.infura.io\", \"5001\", { protocol: \"http\" });\n\nfunction MakeNFT({ web3, account }) {\n  const [img, SetImg] = useState(\"\");\n  const [name, SetName] = useState(\"\");\n  const [link, SetLink] = useState(\"\");\n  const [description, SetDescription] = useState(\"\");\n\n  const [hash, SetHash] = useState([]);\n  const abi = ERC721abi;\n  const CA = \"0x89B078E2eAA3c9c93d3DF3b7A9928a7d08471661\";\n\n  const clickButton = async () => {\n    if (name !== \"\" && img !== \"\" && description !== \"\") {\n      /*express로 서버 따로 만들어야줘야되나?? */\n      const ipfsUpload = (req, res) => {\n        ipfs.add(Buffer.from(img)).then((result) => {\n          SetLink(`https://ipfs.io/ipfs/${result[result.length - 1]}`);\n        });\n      };\n      await ipfsUpload();\n      // 여기까지 하면 링크, 이름, 추가 설명 까지 완성\n\n      SendTransaction();\n    }\n  };\n\n  const SendTransaction = async () => {\n    const nftContract = await new web3.eth.Contract(abi, CA);\n    const nonce = await web3.eth.getTransactionCount(account, \"latest\");\n\n    const tx = {\n      from: account,\n      to: CA,\n      nonce: nonce,\n      gas: 500000,\n      data: nftContract.methods\n        .mintNFT(account, `${link}, ${name}, ${description}`)\n        .encodeABI(),\n    };\n\n    // await web3.eth.sendTransaction(tx).then(console.log);\n\n    const total = await nftContract.methods.totalSupply().call();\n\n    let arr = [];\n    for (let i = 1; i <= total; i++) {\n      arr.push(i);\n    }\n    for (let Id of arr) {\n      let host = await nftContract.methods.ownerOf(Id).call();\n      if (String(host) === account) {\n        let tokenURI = await nftContract.methods.tokenURI(Id).call();\n        console.log(tokenURI);\n      }\n    }\n  };\n\n  const imgChange = async (e) => {\n    if (e.files === undefined) {\n      let reader = new FileReader();\n\n      reader.readAsDataURL(e.target.files[0]);\n      // base64로 인코딩\n      reader.onload = (event) => {\n        const previewImage = document.querySelector(\".img\");\n        previewImage.src = event.target.result;\n        SetImg(event.target.result);\n      };\n    }\n  };\n\n  const convertToBuffer = async (reader) => {\n    const buffer = Buffer.from(reader.result);\n  };\n\n  //useState\n  const nameChange = (e) => {\n    SetName(e.target.value);\n  };\n\n  //useState\n  const descriptionChange = (e) => {\n    SetDescription(e.target.value);\n  };\n\n  return (\n    <div className=\"MakeNFT_back\">\n      <div className=\"MakeNFT_BOX\">\n        <div id=\"title\">Create New Item</div>\n        <div className=\"img_box\">\n          <span className=\"img_span\">img</span>\n\n          <text className=\"img_example\">\n            File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG,\n            GLB, GLTF\n          </text>\n          <img src=\"/\" className=\"img\" />\n          <input\n            id=\"img\"\n            type=\"file\"\n            placeholder=\"img\"\n            required\n            onChange={imgChange}\n          />\n        </div>\n        <div className=\"name_box\">\n          <span className=\"name_span\">name</span>\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            required\n            onChange={nameChange}\n            value={name}\n          />\n        </div>\n\n        <div className=\"description_box\">\n          <span className=\"description_span\">description</span>\n          <input\n            type=\"text\"\n            placeholder=\"description\"\n            required\n            onChange={descriptionChange}\n            value={description}\n          />\n        </div>\n        <button className=\"createbutton\" onClick={clickButton}>\n          Create\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MakeNFT;\n"]},"metadata":{},"sourceType":"module"}